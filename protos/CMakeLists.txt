
cmake_minimum_required(VERSION 3.5.1)

project(PprzgcsGRCP)

# This branch assumes that gRPC and all its dependencies are already installed
# on this system, so they can be located by find_package().

# Find Protobuf installation
# Looks for protobuf-config.cmake file installed by Protobuf's cmake installation.
set(protobuf_MODULE_COMPATIBLE TRUE)
find_package(Protobuf CONFIG REQUIRED)
message(STATUS "Using protobuf ${Protobuf_VERSION}")

set(_PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
set(_REFLECTION gRPC::grpc++_reflection)
if(CMAKE_CROSSCOMPILING)
find_program(_PROTOBUF_PROTOC protoc)
else()
set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
endif()

# Find gRPC installation
# Looks for gRPCConfig.cmake file installed by gRPC's cmake installation.
find_package(gRPC CONFIG REQUIRED)
message(STATUS "Using gRPC ${gRPC_VERSION}")

set(_GRPC_GRPCPP gRPC::grpc++)
if(CMAKE_CROSSCOMPILING)
find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)
else()
set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:gRPC::grpc_cpp_plugin>)
endif()


# Proto file
get_filename_component(pg_proto "pprzgcs.proto" ABSOLUTE)
get_filename_component(pg_proto_path "${pg_proto}" PATH)

# C++ files generated by protoc
set(PROTO_CPP
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs.pb.cc
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs.pb.h
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs.grpc.pb.cc
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs.grpc.pb.h
)

set(PROTO_H
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs.pb.h
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs.grpc.pb.h
)

set_property(SOURCE ${PROTO_CPP} PROPERTY SKIP_AUTOGEN ON)

# python files generated by protoc
set(PROTO_PY
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs_pb2.py
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs_pb2.pyi
    ${CMAKE_CURRENT_BINARY_DIR}/pprzgcs_pb2_grpc.py
)


add_custom_command(
      OUTPUT ${PROTO_CPP}
      COMMAND ${_PROTOBUF_PROTOC}
      ARGS --grpc_out "${CMAKE_CURRENT_BINARY_DIR}"
        --cpp_out "${CMAKE_CURRENT_BINARY_DIR}"
        -I "${pg_proto_path}"
        --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
        "${pg_proto}"
      DEPENDS "${pg_proto}")

add_custom_command (
    OUTPUT ${PROTO_PY}
    COMMAND python3 -m grpc_tools.protoc
        -I"${pg_proto_path}"
        --grpc_python_out="${CMAKE_CURRENT_BINARY_DIR}"
        --python_out="${CMAKE_CURRENT_BINARY_DIR}"
        --pyi_out="${CMAKE_CURRENT_BINARY_DIR}"
        "${pg_proto}"
    DEPENDS "${pg_proto}"
)


# Include generated *.pb.h files
include_directories("${CMAKE_CURRENT_BINARY_DIR}")



# PprzgcsGRCP
add_library(PprzgcsGRCP ${PROTO_CPP})

set_target_properties( PprzgcsGRCP PROPERTIES
#    VERSION ${PROJECT_VERSION}
    FRAMEWORK TRUE
    PUBLIC_HEADER "${PROTO_H}"
)

target_link_libraries(PprzgcsGRCP
  ${_REFLECTION}
  ${_GRPC_GRPCPP}
  ${_PROTOBUF_LIBPROTOBUF})


# invoke custom command
add_custom_target ( proto_py ALL DEPENDS ${PROTO_PY} )


if(NOT DEFINED PPRZGCS_GRPC_PREFIX)
    set(PPRZGCS_GRPC_PREFIX ${CMAKE_INSTALL_PREFIX})
endif()

message("PPRZGCS_GRPC_PREFIX: ${PPRZGCS_GRPC_PREFIX}")

set(PPRZGCS_GRPC_INSTALL_LIBDIR ${PPRZGCS_GRPC_PREFIX}/lib)
set(PPRZGCS_GRPC_INSTALL_BINDIR ${PPRZGCS_GRPC_PREFIX}/bin)
set(PPRZGCS_GRPC_INSTALL_INCLUDEDIR ${PPRZGCS_GRPC_PREFIX}/include)
set(PPRZGCS_GRPC_INSTALL_PYTHON ${PPRZGCS_GRPC_PREFIX}/python)

install(TARGETS PprzgcsGRCP
        EXPORT PprzgcsGRCPConfig
        ARCHIVE DESTINATION ${PPRZGCS_GRPC_INSTALL_LIBDIR}
        LIBRARY DESTINATION ${PPRZGCS_GRPC_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${PPRZGCS_GRPC_INSTALL_BINDIR}
        PUBLIC_HEADER DESTINATION ${PPRZGCS_GRPC_INSTALL_INCLUDEDIR}
        INCLUDES DESTINATION ${PPRZGCS_GRPC_INSTALL_INCLUDEDIR}
)

export(TARGETS PprzgcsGRCP FILE "${CMAKE_CURRENT_BINARY_DIR}/PprzgcsGRCPConfig.cmake")

install(EXPORT PprzgcsGRCPConfig DESTINATION "${PPRZGCS_GRPC_PREFIX}/cmake")

install(FILES ${PROTO_PY} DESTINATION ${PPRZGCS_GRPC_INSTALL_PYTHON})

